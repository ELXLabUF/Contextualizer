import { Injectable } from '@angular/core';
import * as lib from 'papaparse/papaparse.min.js';
import * as i0 from "@angular/core";
export class Papa {
    constructor() {
        this._papa = lib;
    }
    /**
     * Parse CSV to an array
     */
    parse(csv, config) {
        return this._papa.parse(csv, config);
    }
    /**
     * Convert an array into CSV
     */
    unparse(data, config) {
        return this._papa.unparse(data, config);
    }
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     */
    setLocalChunkSize(value) {
        this._papa.LocalChunkSize = value;
    }
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     */
    setRemoteChunkSize(value) {
        this._papa.RemoteChunkSize = value;
    }
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     */
    setDefaultDelimiter(value) {
        this._papa.DefaultDelimiter = value;
    }
    /**
     * An array of characters that are not allowed as delimiters.
     */
    get badDelimiters() {
        return this._papa.BAD_DELIMITERS;
    }
    /**
     * The true delimiter. Invisible. ASCII code 30.
     * Should be doing the job we strangely rely upon commas and tabs for.
     */
    get recordSeparator() {
        return this._papa.RECORD_SEP;
    }
    /**
     * Also sometimes used as a delimiting character. ASCII code 31.
     */
    get unitSeparator() {
        return this._papa.UNIT_SEP;
    }
    /**
     * Whether or not the browser supports HTML5 Web Workers.
     * If false, worker: true will have no effect.
     */
    get workersSupported() {
        return this._papa.WORKERS_SUPPORTED;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: Papa, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: Papa, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.0", ngImport: i0, type: Papa, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFwYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvcGFwYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzNDLE9BQU8sS0FBSyxHQUFHLE1BQU0sNEJBQTRCLENBQUM7O0FBS2xELE1BQU0sT0FBTyxJQUFJO0lBSGpCO1FBSVcsVUFBSyxHQUFHLEdBQUcsQ0FBQztLQXFFdEI7SUFuRUc7O09BRUc7SUFDSSxLQUFLLENBQUMsR0FBa0IsRUFBRSxNQUFvQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPLENBQUMsSUFBaUIsRUFBRSxNQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGlCQUFpQixDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxrQkFBa0IsQ0FBQyxLQUFhO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQkFBbUIsQ0FBQyxLQUFhO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDckMsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQUksZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxhQUFhO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hDLENBQUM7OEdBckVRLElBQUk7a0hBQUosSUFBSSxjQUZELE1BQU07OzJGQUVULElBQUk7a0JBSGhCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFyc2VSZXN1bHQgfSBmcm9tICcuL2ludGVyZmFjZXMvcGFyc2UtcmVzdWx0JztcbmltcG9ydCB7IFBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BhcnNlLWNvbmZpZyc7XG5pbXBvcnQgeyBVbnBhcnNlQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3VucGFyc2UtY29uZmlnJztcbmltcG9ydCB7IFVucGFyc2VEYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3VucGFyc2UtZGF0YSc7XG5pbXBvcnQgKiBhcyBsaWIgZnJvbSAncGFwYXBhcnNlL3BhcGFwYXJzZS5taW4uanMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQYXBhPFQgPSBhbnk+IHtcbiAgICBwdWJsaWMgX3BhcGEgPSBsaWI7XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBDU1YgdG8gYW4gYXJyYXlcbiAgICAgKi9cbiAgICBwdWJsaWMgcGFyc2UoY3N2OiBzdHJpbmcgfCBCbG9iLCBjb25maWc/OiBQYXJzZUNvbmZpZyk6IFBhcnNlUmVzdWx0PFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEucGFyc2UoY3N2LCBjb25maWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW4gYXJyYXkgaW50byBDU1ZcbiAgICAgKi9cbiAgICBwdWJsaWMgdW5wYXJzZShkYXRhOiBVbnBhcnNlRGF0YSwgY29uZmlnPzogVW5wYXJzZUNvbmZpZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLnVucGFyc2UoZGF0YSwgY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNpemUgaW4gYnl0ZXMgb2YgZWFjaCBmaWxlIGNodW5rLlxuICAgICAqIFVzZWQgd2hlbiBzdHJlYW1pbmcgZmlsZXMgb2J0YWluZWQgZnJvbSB0aGUgRE9NIHRoYXRcbiAgICAgKiBleGlzdCBvbiB0aGUgbG9jYWwgY29tcHV0ZXIuIERlZmF1bHQgMTAgTUIuXG4gICAgICovXG4gICAgcHVibGljIHNldExvY2FsQ2h1bmtTaXplKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcGFwYS5Mb2NhbENodW5rU2l6ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc2l6ZSBpbiBieXRlcyBvZiBlYWNoIHJlbW90ZSBmaWxlIGNodW5rLlxuICAgICAqIFVzZWQgd2hlbiBzdHJlYW1pbmcgcmVtb3RlIGZpbGVzLiBEZWZhdWx0IDUgTUIuXG4gICAgICovXG4gICAgcHVibGljIHNldFJlbW90ZUNodW5rU2l6ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3BhcGEuUmVtb3RlQ2h1bmtTaXplID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWxpbWl0ZXIgdXNlZCB3aGVuIGl0IGlzIGxlZnQgdW5zcGVjaWZpZWQgYW5kIGNhbm5vdCBiZSBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5LiBEZWZhdWx0IGlzIGNvbW1hLlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXREZWZhdWx0RGVsaW1pdGVyKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcGFwYS5EZWZhdWx0RGVsaW1pdGVyID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgYWxsb3dlZCBhcyBkZWxpbWl0ZXJzLlxuICAgICAqL1xuICAgIGdldCBiYWREZWxpbWl0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5CQURfREVMSU1JVEVSUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHJ1ZSBkZWxpbWl0ZXIuIEludmlzaWJsZS4gQVNDSUkgY29kZSAzMC5cbiAgICAgKiBTaG91bGQgYmUgZG9pbmcgdGhlIGpvYiB3ZSBzdHJhbmdlbHkgcmVseSB1cG9uIGNvbW1hcyBhbmQgdGFicyBmb3IuXG4gICAgICovXG4gICAgZ2V0IHJlY29yZFNlcGFyYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEuUkVDT1JEX1NFUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbHNvIHNvbWV0aW1lcyB1c2VkIGFzIGEgZGVsaW1pdGluZyBjaGFyYWN0ZXIuIEFTQ0lJIGNvZGUgMzEuXG4gICAgICovXG4gICAgZ2V0IHVuaXRTZXBhcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLlVOSVRfU0VQO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBicm93c2VyIHN1cHBvcnRzIEhUTUw1IFdlYiBXb3JrZXJzLlxuICAgICAqIElmIGZhbHNlLCB3b3JrZXI6IHRydWUgd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICAgKi9cbiAgICBnZXQgd29ya2Vyc1N1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEuV09SS0VSU19TVVBQT1JURUQ7XG4gICAgfVxufVxuIl19